name: Infrastructure Pipeline

on:
  push:
    branches: [ "main" ]

#These environment variables are used by the terraform azure provider to setup OIDC authenticate. 
env:
  ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
  ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
  ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}   

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: Azure    


    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
    
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir="./infrastructure/" init

    # Validate terraform files
    - name: Terraform Validate
      run: terraform -chdir="./infrastructure/" validate      

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform -chdir="./infrastructure/" fmt -check -recursive

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir="./infrastructure/" plan -input=false

    # Apply the execution to create resources
    - name: Terraform Apply
      run: terraform -chdir="./infrastructure/" apply -auto-approve -input=false
