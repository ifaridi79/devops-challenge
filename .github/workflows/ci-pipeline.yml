name: CI Pipeline


on:
  pull_request:
    branches: [ "main" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  TAG: latest

permissions:
  contents: read

jobs:
  build_code:
    name: 'Code Build'
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Set Pyhton environment
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    
    # Install dependencies
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Lint code
    - name: Lint Code
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Unit testing        
    - name: Unit Test
      run: |
        python -m unittest --verbose --failfast

  build-and-push-image:
    needs: [build_code]
    name: 'Build and Push Docker Image'    
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    # Checking out the code
    - name: Checkout repository
      uses: actions/checkout@v3

    # Login into Container GitHub Registry Package Manager  
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Building the Docker image and tag    
    - name: Build and tag image
      run: docker build -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}" --label org.opencontainers.image.description=Flask API Image Build with the latest .

    # Push to GitHub Registry  
    - name: Push to GitHub Registry
      run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}    

  test_image:
    needs: [build-and-push-image]
    name: 'Test Docker Image' 
    runs-on: ubuntu-latest

    steps:
    # Login into Container Registry  
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
          
    # Pull down the docker image    
    - name: Pull image from GitHub Registry
      run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }} 

    # Run unit tests against docker container  
    - name: Run unit tests in container
      run: docker run "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}" -m unittest --verbose --failfast