name: CD Pipeline


on:
  push:
    branches: [ "main" ]
      
env:
    ARM_CLIENT_ID: "${{ secrets.AZURE_CLIENT_ID }}"
    ARM_SUBSCRIPTION_ID: "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
    ARM_TENANT_ID: "${{ secrets.AZURE_TENANT_ID }}"
    ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}       
    REGISTRY: ghcr.io
    GIT_HUB_SECRETS: github-secrets
    TAG: latest
    IMAGE_NAME: ${{ github.repository }}
    CLUSTER_RESOURCE_GROUP: "terraform-github-actions-rg"
    CLUSTER_NAME: "terraform-resource-aks"
    LOCATION: "East US 2"
    NAMESPACE: default
    DEPLOYMENT_MANIFEST_PATH: "manifests/deployment.yaml"
    SERVICE_MANIFEST_PATH: "manifests/service.yaml"


jobs:
  infrastructure:
    name: 'Provisioning AKS'
    runs-on: ubuntu-latest
    environment: Azure        
    
    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
    
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}       
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: tf-init
      run: terraform -chdir="./infrastructure/" init       

    # Validate terraform files
    - name: Terraform Validate
      id: tf-validate
      run: terraform -chdir="./infrastructure/" validate -no-color    
    
    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id: tf-format
      run: terraform -chdir="./infrastructure/" fmt -check -recursive
      continue-on-error: true
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: tf-plan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      run: terraform -chdir="./infrastructure/" plan -input=false
    
    # Apply the execution to create resources
    - name: Terraform Apply
      id: tf-apply
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}      
      run: terraform -chdir="./infrastructure/" apply -auto-approve -input=false
    
         
  deploy:
    name: 'Deploying AKS'    
    needs: [infrastructure]    
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read  # This is required for actions/checkout
    environment: Azure    
      
    steps:
    # Checks out the repository this file is in
    - name: Checkout      
      uses: actions/checkout@master
     
    - uses: azure/setup-kubectl@v2.0
      
    # Set the target Azure Kubernetes Service (AKS) cluster. 
    - name: Set AKS Context
      uses: Azure/aks-set-context@v1
      with:
        creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
      
    # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      
    # Create imagepullsecret for GitHub Registry Package Manager
    - name: AKS Secrets for GitHub
      uses: Azure/k8s-create-secret@v1.1
      with:
        container-registry-url: ${{ env.REGISTRY }}
        container-registry-username: ${{ github.actor }}
        container-registry-password: ${{ secrets.GITHUB_TOKEN }}
        secret-name: ${{ env.GIT_HUB_SECRETS }}
        namespace: ${{ env.NAMESPACE }}
      
    # Deploy app to AKS
    - name: Deploy to AKS      
      uses: Azure/k8s-deploy@v4
      with:
        manifests: |
          ${{ env.DEPLOYMENT_MANIFEST_PATH }}
          ${{ env.SERVICE_MANIFEST_PATH }}
        images: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}
        imagepullsecrets: |
          ${{ env.GIT_HUB_SECRETS }}
        namespace: ${{ env.NAMESPACE }}