# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: DevOps Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]


env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CLUSTER_RESOURCE_GROUP: "smashing-shrew-rg"
  CLUSTER_NAME: "smashing-shrew-aks"
  NAMESPACE: default
  DEPLOYMENT_MANIFEST_PATH: "k8-deployment.yaml"

permissions:
  contents: read

jobs:
  build_code:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint Code
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Unit Test
      run: |
        python -m unittest --verbose --failfast

  build-and-push-image:
    needs: [build_code]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and tag image
        run: docker build -t "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" .

      - name: Push to GitHub Registry
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest    

  test_image:
    needs: [build-and-push-image]
    runs-on: ubuntu-latest

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Pull image from GitHub Registry
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest 

      - name: Run unit tests in container
        run: docker run "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" -m unittest --verbose --failfast

  deploy:
    needs: [test_image]
    runs-on: ubuntu-latest
    environment: Azure    
    steps:
      # Checks out the repository this file is in
      - uses: actions/checkout@master

      # Set the target Azure Kubernetes Service (AKS) cluster. 
      - uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
          cluster-name: ${{ env.CLUSTER_NAME }}
          resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      # Create namespace if doesn't exist
      - run: |
          kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

      # Create imagepullsecret for Azure Container registry (ACR)
      - uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.REGISTRY }}
          container-registry-username: ${{ github.actor }}
          container-registry-password: ${{ secrets.GITHUB_TOKEN }}
          secret-name: ${{ env.REGISTRY_NAME }}-registry-connection
          namespace: ${{ env.NAMESPACE }}

      # Deploy app to AKS
      - uses: azure/k8s-deploy@v1
        with:
          manifests: |
            manifests/deployment.yml
            manifests/service.yml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          imagepullsecrets: |
            ${{ env.REGISTRY }}-registry-connection
          namespace: ${{ env.NAMESPACE }}